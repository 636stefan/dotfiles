#!/bin/bash
#
# Dock statusbar for i3, using dzen2
#
# Expanded from:
# https://bitbucket.org/jasonwryan/eeepc/src/73dadb289dead8ef17ef29a9315ba8f1706927cb/Scripts/dwm-status
# and W0ng dotfiles

#res_w=$(xrandr | grep "current" | awk '{print $8a}')
#res_h=$(xrandr | grep "current" | awk '{print $10}' | tr -d ',')

# Settings
# ---------------------------------------------------------------------------
colour_back="#1D1F21"             # Background
colour_fore="#C5C8C6"             # Foreground
interval=3                        # Update interval (seconds)
dzen_font="DroidSans:size=8"      # Font
dzen_ifont="Terminusicons2"       # Powerline icon font
dzen_height=12                    # Bar height
dzen_pos="0"                      # Position. 0 = top, $res_h = bottom (uncomment)
dzen_align="r"                    # Alignment l(eft), c(enter), r(ight)

# Dzen2 command
dzen_command="dzen2 -dock -y ${dzen_pos} -h ${dzen_height} -fn ${dzen_ifont} -ta ${dzen_align} -bg ${colour_back} -fg ${colour_fore}"

# Colour codes (Hybrid)
colour_sec_b1="#1C1C1C"           # Background 1
colour_sec_b2="#262626"           # Background 2
colour_sec_b3="#303030"           # Background 3
colour_gray="#373B41"             # gray
colour_lgray="#707880"            # light gray
colour_dgray="#282A2E"            # dark gray
colour_white="#C5C8C6"            # white
colour_red="#A54242"              # red
colour_lred="#CC6666"             # light red
colour_green="#8C9440"            # green
colour_lgreen="#B5BD68"           # light green
colour_orange="#CE935F"           # orange
colour_yellow="#F0C674"           # yellow
colour_blue="#5F819D"             # blue
colour_lblue="#81A2BE"            # light blue
colour_magenta="#85678F"          # magenta
colour_lmagenta="#B294BB"         # light magenta
colour_cyan="#5E8D87"             # cyan
colour_lcyan="#8ABEB7"            # light cyan

# Icon glyphs from Terminusicons2
icon_clock="\u00D5"               # Clock icon
icon_cpu="\u00CF"                 # CPU icon
icon_mem="\u00DE"                 # MEM icon
icon_dl="\u00D0"                  # Download icon
icon_ul="\u00D1"                  # Upload icon
icon_vol="\u00D4"                 # Volume icon
icon_hd="\u00C0"                  # HD / icon
icon_home="\u00C6"                # HD /home icon
icon_mail="\u00D3"                # Mail icon
icon_chat="\u00D2"                # IRC/Chat icon
icon_music="\u00CE"               # Music icon
icon_prog="\u00C2"                # Window icon
sep_left="\u00DC"                 # Powerline separator left
sep_right="\u00DA"                # Powerline separator right
sep_l_left="\u00DD"               # Powerline light separator left
sep_l_right="\u00DB"              # Powerline light sepatator right

# Print info functions
# ---------------------------------------------------------------------------

last_bg=${colour_back}

# Print sections with powerline glyphs
# $1 = background
# $2 = foreground
# $3 = Separator
# $4 = glyph icon
# $5 = text
print_sec_pline() {
  echo -ne "^bg(${last_bg})^fg($1)$3^bg($1)^fg($2) $4 ^fn(${dzen_font})$5^fn()"
  last_bg=$1
}

print_song_info() {
  song_info="$(mpc current -f '[[[[%artist% \uE01B ]%title%]]|[%file%]]' | head -c 75)"
  if [[ ! $song_info ]]; then
    song_info="Off"
  fi
  echo -ne "${colour_dgry}${sep_solid}${colour_cyn} ${glyph_msc} ${song_info} "
}

print_torrent_status() {
  torrent_status="$(transmission-remote -l | awk -F "  +" '$5 ~ /^[0-9]/ {print $5}')"
  if [[ ! $torrent_status ]]; then
    torrent_status="Idle"
  fi
  echo -ne "${colour_blk}${sep_solid}${colour_dylw} ${glyph_tor} ${torrent_status} "
}

print_email_unread() {
  echo -ne "${colour_dgry}${sep_solid}${colour_ylw} ${glyph_eml}"
  for maildir in $(find $HOME/.mutt/maildir/*/inbox/new -type d); do
    unread_count="$(ls "${maildir}" | wc -l)"
    echo -n " ${unread_count}"
  done
  echo -n " "
}

print_last_msg() {
  last_msg="$(cat $HOME/.logs/irssi_pipe)"
  echo -ne "${colour_blk}${sep_solid}${colour_dylw} ${glyph_com} ${last_msg} "
}

print_mem_used() {
  mem_used="$(free -m | awk 'NR==3 {print $3}')"
  echo -ne "${sep_line} ${glyph_mem} ${mem_used}M "
}
Mem ()
{
	MEM=$(free -m | grep '-' | awk '{print $3}')
	echo -n "^fg($COLOR_ICON)^i($ICONPATH/mem.xbm)^fg() ${MEM} M"
	return
}

Temp ()
{
	TEMP=$(acpi -t | awk '{print $4}' | tr -d '.0')
}

Disk ()
{
	SDA2=$(df -h / | awk '/\/$/ {print $5}' | tr -d '%')
	SDA4=$(df -h /home | awk '/home/ {print $5}' | tr -d '%')
	if [[ ${SDA2} -gt 60 ]] ; then
		echo -n "^fg($COLOR_ICON)^i($ICONPATH/fs_01.xbm)^fg() /:${SDA2}% $(echo $SDA2 | gdbar -fg $CRIT_COLOR -bg $BAR_BG -h 7 -w 40 -s o -ss 0 -sw 2 -nonl)"
	else
		echo -n "^fg($COLOR_ICON)^i($ICONPATH/fs_01.xbm)^fg() /:${SDA2}% $(echo $SDA2 | gdbar -fg $BAR_FG -bg $BAR_BG -h 7 -w 40 -s o -ss 0 -sw 2 -nonl)"
	fi
	if [[ ${SDA4} -gt 80 ]] ; then
		echo -n "  ~:${SDA4}% $(echo $SDA4 | gdbar -fg $CRIT_COLOR -bg $BAR_BG -h 7 -w 40 -s o -ss 0 -sw 2 -nonl)"
	else
		echo -n "  ~:${SDA4}% $(echo $SDA4 | gdbar -fg $BAR_FG -bg $BAR_BG -h 7 -w 40 -s o -ss 0 -sw 2 -nonl)"
	fi
	return
}



print_volume() {
  var=$(amixer get Master | grep Left | awk -F'[]%[]' '/%/ {if ($5 == "off") {print "Ã—"} else {printf "%d%%", $2}}')
  print_sec_pline "${colour_sec_b3}" "${colour_white}" "${sep_left}" "${icon_vol}" "${var} "
}

print_date() {
  var="$(date "+%a %d %b")"
  print_sec_pline "${colour_sec_b1}" "${colour_white}" "${sep_left}" "${icon_clock}" "${var} "
}

print_time() {
  var="$(date "+%H:%M")"
  print_sec_pline "${colour_lgreen}" "${colour_dgray}" "${sep_left}" "" "${var} "
}


# network (from: http://dzen.geekmode.org/dwiki/doku.php?id=dzen:network-meter)
# cpu (from: https://bbs.archlinux.org/viewtopic.php?pid=661641#p661641)
rx_old=$(cat /sys/class/net/eth0/statistics/rx_bytes)
tx_old=$(cat /sys/class/net/eth0/statistics/tx_bytes)

while :; do
  # get new cpu idle and total usage
  eval $(awk '/^cpu /{print "cpu_idle_now=" $5 "; cpu_total_now=" $2+$3+$4+$5 }' /proc/stat)
  cpu_interval=$((cpu_total_now-${cpu_total_old:-0}))
  # calculate cpu usage (%)
  let cpu_used="100 * ($cpu_interval - ($cpu_idle_now-${cpu_idle_old:-0})) / $cpu_interval"

  # get new rx/tx counts
  rx_now=$(cat /sys/class/net/eth0/statistics/rx_bytes)
  tx_now=$(cat /sys/class/net/eth0/statistics/tx_bytes)
  # calculate the rate (K) and total (M)
  let rx_rate=($rx_now-$rx_old)/1024
  let tx_rate=($tx_now-$tx_old)/1024

  # output vars
#  print_cpu_used() {
#    printf "%-14b" "${colour_dgry}${sep_solid}${colour_blu} ${glyph_cpu} ${cpu_used}%"
#  }
#  print_rx_rate() {
#    printf "%-15b" "${colour_blk}${sep_solid}${colour_grn} ${glyph_dl} ${rx_rate}K"
#  }
#  print_tx_rate() {
#    printf "%-14b" "${colour_gry}${sep_line}${colour_red} ${glyph_ul} ${tx_rate}K"
#  }

  # reset old rates
  rx_old=$rx_now
  tx_old=$tx_now
  cpu_idle_old=$cpu_idle_now
  cpu_total_old=$cpu_total_now

#done

  print_all() {
    echo -ne " cpu ${cpu_used}% "
    echo -ne " D ${rx_rate}K U ${tx_rate}K "
    print_volume
    print_date
    print_time
  }

  echo $(print_all)
  sleep ${interval}

done | $dzen_command &
#done
